Gamma = SQRTINV(Sigma)
Xt = Gamma
yt = as.vector(Gamma %*% xi_2)
X = Gamma
y = as.vector(Gamma %*% xi_1)
fit = glmnet(X, y, family = "gaussian")
k = fit$df
AIC = deviance(fit) + 2*k
i_min = which.min(AIC)
lambda_select = fit$lambda[i_min]
fit_AIC = glmnet(X, y, family = "gaussian", lambda = lambda_select)
w1 = as.vector(fit_AIC$beta[, 1])
idx = which(w1 != 0)
k = ceiling(0.7*p)
if (length(idx) > k){
wv = which(fit$df == max(fit$df[fit$df < k]))[1]
w1 = as.vector(fit$beta[, wv])
idx = which(w1 != 0)
}
if (length(idx) > 0){
Q = solve(t(Xt[, idx])%*%Xt[, idx])
bt = Q %*% (t(Xt[, idx]) %*% yt)
w2 = rep(0, p)
w2[idx] = bt
sigma_w = rep(1, p)
sigma_w[idx] = diag(Q)
W = w1 * w2 / sigma_w
W[is.na(W)] = 0
} else {
W = rep(0, p)
}
plot(W)
signal = WDet(W, alpha)
alpha = 0.1
alpha = 0.1
signal = WDet(W, alpha)
length(signal)
Omega_w = chol2inv(chol(Sigma))
Gamma = chol(Omega_w)
Xt = Gamma
yt = as.vector(Gamma %*% xi_2)
X = Gamma
y = as.vector(Gamma %*% xi_1)
fit = glmnet(X, y, family = "gaussian")
k = fit$df
AIC = deviance(fit) + 2*k
i_min = which.min(AIC)
lambda_select = fit$lambda[i_min]
fit_AIC = glmnet(X, y, family = "gaussian", lambda = lambda_select)
w1 = as.vector(fit_AIC$beta[, 1])
idx = which(w1 != 0)
k = ceiling(0.7*p)
if (length(idx) > k){
wv = which(fit$df == max(fit$df[fit$df < k]))[1]
w1 = as.vector(fit$beta[, wv])
idx = which(w1 != 0)
}
if (length(idx) > 0){
Q = solve(t(Xt[, idx])%*%Xt[, idx])
bt = Q %*% (t(Xt[, idx]) %*% yt)
w2 = rep(0, p)
w2[idx] = bt
sigma_w = rep(1, p)
sigma_w[idx] = diag(Q)
W = w1 * w2 / sigma_w
W[is.na(W)] = 0
} else {
W = rep(0, p)
}
signal = WDet(W, alpha)
length(signal)
SPLITE = (1:floor(N/r))*r
m = length(SPLITE)
n = N - m
dat_1 = dat[-SPLITE, ]
dat_2 = dat[SPLITE, ]
sum.dat1 = cbind(dat_1[1, ], sapply(2:n, function(x){ colSums(dat_1[1:x, ])})) ## p x n
cusum = abs(t(sum.dat1[, -n] - matrix(rep((1:(n-1))/n, p), byrow = T, ncol = n-1) * sum.dat1[, n])) * sqrt(n/((1:(n-1))*(n - 1:(n-1)))) ## n x p
tau_1 = (2*r-2) + apply(cusum[(2*r-1):(n-2*r), ], 2, which.max)
tau_2 = ceiling(tau_1/(r-1))
D1 = sqrt(tau_1*(n-tau_1)/n)
D2 = sqrt(tau_2*(m-tau_2)/m)
gam_1 = sapply(1:p, function(x){
mean(dat_1[(tau_1[x]+1):n, x]) - mean(dat_1[1:tau_1[x], x])
})
gam_2 = sapply(1:p, function(x){
mean(dat_2[(tau_2[x]+1):m, x]) - mean(dat_2[1:(tau_2[x]-1), x])
})
xi_1 = D1*gam_1
xi_2 = D2*gam_2
## Estimate covariance matrix
if (covEst){
dat_c = sapply(1:p, function(x){
dat_1[, x] - c(rep(mean(dat_1[1:tau_1[x], x]), tau_1[x]), rep(mean(dat_1[(tau_1[x]+1):n, x]), (n - tau_1[x])))
})
if (estMthd == "Cholesky"){
Omega = PreEst.2017Lee(dat_c, upperK = 10L)$C
Sig = chol2inv(chol(Omega))
} else if (estMthd == "POET"){
K = POETKhat(t(dat_c))$K1HL
Sig = POET(t(dat_c), K)$SigmaY
} else {
stop(list("Please specify an estimation method from c('POET', 'Cholesky')."))
}
}
temp.row = tau_2[as.vector(row(diag(p)))]
temp.col = tau_2[as.vector(col(diag(p)))]
INDI = which(temp.row > temp.col)
ma = rep(0, p^2)
ma[INDI] = temp.row[INDI]
ma[-INDI] = temp.col[-INDI]
mi = rep(0, p^2)
mi[INDI] = temp.col[INDI]
mi[-INDI] = temp.row[-INDI]
Sigma = matrix(sqrt(mi*(m - ma)/(ma*(m - mi)))*as.vector(Sig), nrow = p)
Omega_w = chol2inv(chol(Sigma))
Gamma = chol(Omega_w)
D_sig = diag(Sig)
Xt = Gamma
yt = as.vector(Gamma %*% xi_2)
thrsh = sqrt(C*log(n))
C = 1.5
thrsh = sqrt(C*log(n))
w1 = xi_1/sqrt(D_sig)
idx = which(abs(w1) >= thrsh)
if (length(idx) == 0){
W = rep(0, p)
} else {
Q = solve(t(Xt[, idx])%*%Xt[, idx])
bt = Q %*% (t(Xt[, idx]) %*% yt)
w2 = rep(0, p)
w2[idx] = bt/sqrt(diag(Q))
W = w1 * w2
W[is.na(W)] = 0
}
W_chol = W
plot(W)
plot(W_chol)
plot(W_chol)
signal = WDet(W, alpha)
signal_chol = signal
Gamma = SQRTINV(Sigma)
D_sig = diag(Sig)
Xt = Gamma
yt = as.vector(Gamma %*% xi_2)
thrsh = sqrt(C*log(n))
w1 = xi_1/sqrt(D_sig)
idx = which(abs(w1) >= thrsh)
if (length(idx) == 0){
W = rep(0, p)
} else {
Q = solve(t(Xt[, idx])%*%Xt[, idx])
bt = Q %*% (t(Xt[, idx]) %*% yt)
w2 = rep(0, p)
w2[idx] = bt/sqrt(diag(Q))
W = w1 * w2
W[is.na(W)] = 0
}
signal = WDet(W, alpha)
plot(W)
length(signal)
length(signal_chol)
cbind(signal, signal_chol)
apply(cbind(signal, signal_chol), 1, function(x){x[1] == x[2]})
rm(list = ls())
gc()
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::build_manual(pkg = ".", path = "./doc")
devtools::build(vignettes = T, manual = T)
devtools::install(build_vignettes = T)
browseVignettes("SLIP")
devtools::document()
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::build_manual(pkg = ".", path = "./doc")
devtools::build(vignettes = T, manual = T)
devtools::install(build_vignettes = T)
browseVignettes("SLIP")
devtools::document()
devtools::check()
.Last.error.trace
devtools::check()
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::build_manual(pkg = ".", path = "./doc")
devtools::build(vignettes = T, manual = T)
devtools::install(build_vignettes = T)
browseVignettes("SLIP")
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::build_manual(path = "./doc")
devtools::build(vignettes = T, manual = T)
devtools::install(build_vignettes = T)
x = matrix(1:9, 3, 3)
a = solve(x)
x = matrix(1:9, 3, 3)
x[1, 1] = 10
x[2, 2] = 10
a = solve(x)
b = chol2inv(chol(x))
all.equal(a, b)
a
b
x
x[2, 1] = 4
x[3, 1] = 7
x[3, 2] = 8
x
b = chol2inv(chol(x))
a
a = solve(x)
all.equal(a, b)
rm(list = ls())
gc()
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::build_manual(path = "./doc")
devtools::b
devtools::build(vignettes = T, manual = T)
devtools::install(build_vignettes = T)
browseVignettes("SLIP")
N = 100
D = 2*log(log(N)) + log(log(log(N)))/2 - log(gamma(0.5))
D
sqrt(2*log(log(N)))
exp(-2)
t = 0.001
1-exp(-2*exp(-t))
t = -D
1-exp(-2*exp(-t))
rm(list = ls())
gc()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
.Last.error.trace
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(SLIP)
set.seed(1234)
library(SLIP)
set.seed(1234)
data = SLIP.scp.generator(120, 200)
sig.thrsh.c = SLIP.thresh.c(data$dat, 0.1)
sig.thrsh.d = SLIP.thresh.d(data$dat, 0.1)
sig.lasso = SLIP.lasso(data$dat, 0.1)
sig.indep = SLIP.indep(data$dat, 0.1)
ECDF = bootstrap.cusum(120, 1000)
sig.simul = BH.simul(data$dat, 0.1, ECDF)
data = SLIP.scp.generator(120, 200)
sig.thrsh.c = SLIP.thresh.c(data$dat, 0.1)$sig
rm(list = ls())
gc()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::build_manual(path = "./doc")
devtools::build(vignettes = T, manual = T)
devtools::install(build_vignettes = T)
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::build_manual(path = "./doc")
devtools::build(vignettes = T, manual = T)
devtools::install(build_vignettes = T)
dedevtools::
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::build_manual(path = "./doc")
devtools::build(vignettes = T, manual = T)
devtools::install(build_vignettes = T)
browseVignettes("SLIP")
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::build_manual(path = "./doc")
devtools::build(vignettes = T, manual = T)
devtools::install(build_vignettes = T)
browseVignettes("SLIP")
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::build_manual(path = "/doc")
devtools::build_manual(path = "./doc")
devtools::build(vignettes = T, manual = T)
devtools::install(build_vignettes = T)
l = list(a = 1, b = 2)
c(l, list(c = 3))
c(l, list(c = 3))
rm(list = ls())
gc()
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::build_manual(path = "./doc")
devtools::build(vignettes = T, manual = T)
devtools::install(build_vignettes = T)
browseVignettes("SLIP")
tau = c(1:10)
tau[c(2, 3)]
tau[c(2, 3)]/10
ifelse(1, tau[c(2, 3)]/10, NULL)
ifelse(rep(1, 10), tau[c(2, 3)]/10, NULL)
devtools::document()
rm(list = ls())
gc()
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::build_manual(path = "./doc")
devtools::build(vignettes = T, manual = T)
devtools::install(build_vignettes = T)
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::build_manual(path = "./doc")
devtools::build(vignettes = T, manual = T)
devtools::install(build_vignettes = T)
browseVignettes("SLIP")
usethis::use_data(fmri.data)
load("./data/fmri.data.RData")
usethis::use_data(fmri.data)
(fmri.data$regions)[1]
tools::checkRdaFiles()
tools::checkRdaFiles("./data/")
rm(list = ls())
gc()
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::build_manual(path = "./doc")
devtools::build(vignettes = T, manual = T)
devtools::install(build_vignettes = T)
devtools::load_all()
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::build_manual(path = "./doc")
devtools::build(vignettes = T, manual = T)
devtools::install(build_vignettes = )
devtools::install(build_vignettes = T)
?SLIP.mcp.generator
??SLIP.mcp.generator
library(SLIP)
?SLIP.mcp.generator
?SLIP.scp.generator
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(SLIP)
set.seed(1234)
N = 80
p = 200
data = SLIP.scp.generator(N, p)
alpha = 0.1
sig.thrsh.c = SLIP.thresh.c(data$dat, alpha)$sig
sig.thrsh.d = SLIP.thresh.d(data$dat, alpha)$sig
sig.lasso = SLIP.lasso(data$dat, alpha)$sig
sig.indep = SLIP.indep(data$dat, alpha)$sig
ECDF = bootstrap.cusum(N)
sig.simul = BH.simul(data$dat, alpha, ECDF)$sig
sig.asymp = BH.asymp(data$dat, alpha)$sig
print(paste0("Discoeries by SLIP.thresh.c: ", paste(sig.thrsh.c, collapse = ", ")))
print(paste0("Discoeries by SLIP.thresh.d: ", paste(sig.thrsh.d, collapse = ", ")))
print(paste0("Discoeries by SLIP.lasso: ", paste(sig.lasso, collapse = ", ")))
print(paste0("Discoeries by SLIP.indep: ", paste(sig.indep, collapse = ", ")))
print(paste0("Discoeries by BH.simul: ", paste(sig.simul, collapse = ", ")))
print(paste0("Discoeries by BH.asymp: ", paste(sig.asymp, collapse = ", ")))
alpha = 0.2
sig.thrsh.c = SLIP.thresh.c(data$dat, alpha)$sig
sig.thrsh.d = SLIP.thresh.d(data$dat, alpha)$sig
sig.lasso = SLIP.lasso(data$dat, alpha)$sig
sig.indep = SLIP.indep(data$dat, alpha)$sig
ECDF = bootstrap.cusum(N)
sig.simul = BH.simul(data$dat, alpha, ECDF)$sig
sig.asymp = BH.asymp(data$dat, alpha)$sig
sigList = list(sig.thrsh.c, sig.thrsh.d, sig.lasso, sig.indep, sig.simul, sig.asymp)
FDP = sapply(sigList, function(sig){ length(setdiff(sig, data$index))/max(1, length(sig)) })
TDP = sapply(sigList, function(sig){ length(intersect(sig, data$index))/length(data$index) })
alpha = 0.2
sig.thrsh.c = SLIP.thresh.c(data$dat, alpha)$sig
sig.thrsh.d = SLIP.thresh.d(data$dat, alpha)$sig
sig.lasso = SLIP.lasso(data$dat, alpha)$sig
sig.indep = SLIP.indep(data$dat, alpha)$sig
ECDF = bootstrap.cusum(N)
sig.simul = BH.simul(data$dat, alpha, ECDF)$sig
sig.asymp = BH.asymp(data$dat, alpha)$sig
sigList = list(sig.thrsh.c, sig.thrsh.d, sig.lasso, sig.indep, sig.simul, sig.asymp)
FDP = sapply(sigList, function(sig){ length(setdiff(sig, data$index))/max(1, length(sig)) })
TDP = sapply(sigList, function(sig){ length(intersect(sig, data$index))/length(data$index) })
library(SLIP)
set.seed(1234)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
alpha = 0.2
sig.thrsh.c = SLIP.thresh.c(data$dat, alpha)$sig
sig.thrsh.d = SLIP.thresh.d(data$dat, alpha)$sig
sig.lasso = SLIP.lasso(data$dat, alpha)$sig
sig.indep = SLIP.indep(data$dat, alpha)$sig
ECDF = bootstrap.cusum(N)
sig.simul = BH.simul(data$dat, alpha, ECDF)$sig
sig.asymp = BH.asymp(data$dat, alpha)$sig
sigList = list(sig.thrsh.c, sig.thrsh.d, sig.lasso, sig.indep, sig.simul, sig.asymp)
FDP = sapply(sigList, function(sig){ length(setdiff(sig, data$index))/max(1, length(sig)) })
TDP = sapply(sigList, function(sig){ length(intersect(sig, data$index))/length(data$index) })
alpha = 0.2
sig.thrsh.c = SLIP.thresh.c(data$dat, alpha)$sig
sig.thrsh.d = SLIP.thresh.d(data$dat, alpha)$sig
sig.lasso = SLIP.lasso(data$dat, alpha)$sig
sig.indep = SLIP.indep(data$dat, alpha)$sig
ECDF = bootstrap.cusum(N)
sig.simul = BH.simul(data$dat, alpha, ECDF)$sig
sig.asymp = BH.asymp(data$dat, alpha)$sig
sigList = list(sig.thrsh.c, sig.thrsh.d, sig.lasso, sig.indep, sig.simul, sig.asymp)
FDP = sapply(sigList, function(sig){ length(setdiff(sig, data$index))/max(1, length(sig)) })
TDP = sapply(sigList, function(sig){ length(intersect(sig, data$index))/length(data$index) })
devtools::document()
devtools::check()
require(knitr)
Proceudre = c("SLIP.thresh.c", "SLIP.thresh.d", "SLIP.lasso", "SLIP.indep", "BH.simul", "BH.asymp")
res = data.frame(Proceudre, FDP, TDP)
knitr::kable(res)
Proceudre = c("SLIP.thresh.c", "SLIP.thresh.d", "SLIP.lasso", "SLIP.indep", "BH.simul", "BH.asymp")
res = data.frame(Proceudre, round(FDP, 4), round(TDP, 4))
knitr::kable(t(res))
Proceudre = c("SLIP.thresh.c", "SLIP.thresh.d", "SLIP.lasso", "SLIP.indep", "BH.simul", "BH.asymp")
res = data.frame(Proceudre, FDP = round(FDP, 4), TDP = round(TDP, 4))
knitr::kable(t(res))
a = SLIP.lasso()
a = SLIP.lasso
rm(a)
library(SLIP)
data = fmri.data
dimA = c(data$dimx, data$dimy, data$dimz)
alpha = 0.2
sigInfo = SLIP.thresh.d(data$dat, alpha, estMthd = "POET", outputW = TRUE, outputCP = TRUE)
library(SLIP)
data = fmri.data
dat = apply(data$dat[-c(1:5, 356:360), ], 2, function(X){ colMeans(matrix(X, nrow = 10)) })
dimA = c(data$dimx, data$dimy, data$dimz)
dim(dat)
alpha = 0.2
sigInfo = SLIP.thresh.d(dat, alpha, outputW = TRUE, outputCP = TRUE)
alpha = 0.2
sigInfo = SLIP.thresh.d(dat, alpha, estMthd = "POET", outputW = TRUE, outputCP = TRUE)
plot(sigInfo$W, ylab = "W")
abline(h = c(sigInfo$L, -sigInfo$L), col = "red")
sigInfo$cps
N = 90
p = 200
data = SLIP.scp.generator(N, p, cov = "CS", dist = "t", param = 5)
N = 90
p = 200
data = SLIP.scp.generator(N, p, cov = "CS", dist = "t", rho = 0.5, param = 5)
rm(list = ls())
gc()
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::build_manual(path = "./doc")
devtools::build(vignettes = T, manual = T)
devtools::install(build_vignettes = T)
browseVignettes("SLIP")
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::build_manual(path = "./doc")
devtools::build(vignettes = T, manual = T)
devtools::install(build_vignettes = T)
browseVignettes("SLIP")
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::build_manual(pkg = ".", path = "./doc")
devtools::build(vignettes = TRUE, manual = TRUE)
devtools::install(build_vignettes = TRUE)
browseVignettes("SLIP")
